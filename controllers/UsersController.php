<?php

namespace app\controllers;

use app\models\Posts;
use app\models\Users;
use Yii;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\Cors;
use yii\rest\ActiveController;

class UsersController extends ActiveController
{
    public function actionIndex()
    {
        return $this->render('index');
    }

    public $modelClass = 'app\models\Users';

    public function behaviors()
    {

        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['authentication'] = [
            'class' => \yii\filters\auth\CompositeAuth::className(),
            'authMethods' => [
                HttpBearerAuth::className(),
            ],
            'except' => ['create', 'update', 'auth', 'user', 'delete', 'logout']
        ];

        $behaviors['corsFilter'] = [
            'class' => Cors::className(),
            'cors' => [
                'Origin' => ['*'],
            ],
        ];

        return $behaviors;
    }

    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['auth']);
        unset($actions['update']);
        unset($actions['create']);
        unset($actions['user']);
        unset($actions['delete']);
        unset($actions['logout']);
        return $actions;
    }

    public function actionCreate()
    {
        $input = Yii::input();

        $user = new Users();
        $user->load($input, '');

        $user->token = '-1';
        $user->password = md5($input['password']);

        $user->save();

        if (count($user->errors)) {
            Yii::$app->response->setStatusCode(401, 'Unprocessable entity');
            return ['status' => false, 'message' => $user->errors];
        } else {
            Yii::$app->response->setStatusCode(201, 'Created account');
            return [
                'status' => true,
                'message' => [
                    'login' => $user->login,
                    'surname' => $user->surname,
                    'first_name' => $user->first_name,
                    'phone' => $user->phone,
                    'email' => $user->email
                ]
            ];
        }
    }

    public function actionAuth()
    {
        $input = Yii::input();
        if (!empty($input['login']) && !empty($input['password'])) {
            $user = Users::findOne(['login' => $input['login'], 'password' => md5($input['password'])]);
            if (!empty($user)) {
                $user->token = Yii::$app->security->generateRandomString();
                $user->save();

                Yii::$app->response->setStatusCode(200, 'Successful authorization');
                return ['status' => true, 'token' => $user->token];
            } else {
                Yii::$app->response->setStatusCode(401, 'Invalid authorization data');
                return ['status' => false, 'message' => 'Incorrect login or password'];
            }
        } else {
            $error = [];
            !empty($input['login']) ? $error['login'] = 'Path `login` is required.' : null;
            !empty($input['password']) ? $error['password'] = 'Path `password` is required.' : null;

            Yii::$app->response->setStatusCode(401, 'Invalid authorization data');
            return ['status' => false, 'message' => $error];
        }
    }

    public function getToken()
    {
        $token = explode(' ', Yii::$app->request->headers->get('Authorization'))[1];
        return $token ? $token : null;
    }

    public function actionLogout()
    {
        $user = Users::findIdentityByAccessToken($this->getToken());

        if (!empty($user)) {
            $user->token = '-1';
            $user->save();
            Yii::$app->response->setStatusCode(200, 'OK');
            return ['status' => true];
        } else {
            Yii::$app->response->setStatusCode(401, 'Unauthorized');
            return ['status' => false, 'message' => 'Unauthorized'];
        }
    }

    public function actionUser()
    {
        $user = Users::findIdentityByAccessToken($this->getToken());

        if (!empty($user)) {
            Yii::$app->response->setStatusCode(200, 'OK');

            $posts_id = [];
            $posts = Posts::findAll(['user_id' => $user->id]);
            if (!empty($posts)) {
                foreach ($posts as $post)
                    $posts_id[] = $post->id;
            }

            return [
                'status' => true,
                'message' => [
                    'login' => $user->login,
                    'surname' => $user->surname,
                    'first_name' => $user->first_name,
                    'phone' => $user->phone,
                    'email' => $user->email,
                    'posts_id' => $posts_id
                ]
            ];
        } else {
            Yii::$app->response->setStatusCode(401, 'Unauthorized');
            return ['status' => false, 'message' => 'Unauthorized'];
        }
    }

    public function actionUpdate()
    {
        $input = Yii::input();
        $user = Users::findIdentityByAccessToken($this->getToken());

        if (!empty($user)) {
            $user->load($input, '');
            $user->save();

            if (count($user->errors)) {
                Yii::$app->response->setStatusCode(401, 'Unprocessable entity');
                return ['status' => false, $user->errors];
            } else {
                $posts_id = [];
                $posts = Posts::findAll(['user_id' => $user->id]);

                if (!empty($posts)) {
                    foreach ($posts as $post)
                        $posts_id[] = $post->id;
                }

                Yii::$app->response->setStatusCode(200, 'Update account');

                return [
                    'status' => true,
                    'message' => [
                        'login' => $user->login,
                        'surname' => $user->surname,
                        'first_name' => $user->first_name,
                        'phone' => $user->phone,
                        'email' => $user->email,
                        'posts_id' => $posts_id
                    ]
                ];
            }
        } else {
            Yii::$app->response->setStatusCode(401, 'Unauthorized');
            return ['status' => false, 'message' => 'Unauthorized'];
        }
    }

}
